// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
    engineType      = "binary"
    //binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model S3Object {
    id        String   @id @default(cuid())
    url       String
    key       String
    createdAt DateTime @default(now())
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    user
    admin
}

enum SiteRole {
    viewer
    photopgrapher
}

model Report {
    id          String   @id @default(cuid())
    post        Post[]
    title       String
    description String
    slug        String
    createdAt   DateTime @default(now())
}

model Article {
    id          String   @id @default(cuid())
    title       String
    slug        String   @unique @default(cuid())
    contentJson String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    author      User     @relation(fields: [userId], references: [id])
    userId      String
}

model User {
    id                                String     @id @default(cuid())
    name                              String
    biography                         String?
    occupation                        String?
    verificationCode                  String?
    verificationCodeResendRequestedAt DateTime?
    passwordResetToken                String?
    passwordResetTokenRequestedAt     DateTime?
    favoriteCameraId                  String?
    favoriteCategoryId                String?
    username                          String     @unique @default("")
    email                             String?    @unique
    workPlace                         String?    @default("")
    emailVerified                     DateTime?
    createdAt                         DateTime   @default(now())
    hashedPassword                    String?
    avatarUrl                         String?
    vkId                              Int?
    siteRole                          SiteRole   @default(viewer)
    role                              Role       @default(user)
    accounts                          Account[]
    sessions                          Session[]
    comments                          Comment[]
    posts                             Post[]
    albums                            Album[]
    cameras                           Camera[]
    lenses                            Lens[]
    postLikes                         PostLike[]
    articles                          Article[]
    isBanned                          Boolean    @default(false)
    reasonForBan                      String?
}

model Category {
    id    String @id @default(cuid())
    name  String
    slug  String @unique
    posts Post[]
}

enum TopPostType {
    day
    week
    month
}

model TopPost {
    id            String      @id @default(cuid())
    post          Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
    postCreatedAt DateTime
    createdAt     DateTime    @default(now())
    type          TopPostType
    postId        String
}

model Album {
    id          String   @id @default(cuid())
    name        String
    description String?
    slug        String   @unique
    posts       Post[]
    createdAt   DateTime @default(now())
    author      User     @relation(fields: [userId], references: [id])
    userId      String
}

model PostLike {
    id      String   @id @default(cuid())
    post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    likedAt DateTime @default(now())
    postId  String
}

model Post {
    id          String     @id @default(cuid())
    name        String
    imageUrl    String
    slug        String     @unique
    description String?
    meta        String?
    tags        String[]
    width       Int
    height      Int
    isHidden    Boolean    @default(false)
    category    Category   @relation(fields: [categoryId], references: [id])
    categoryId  String
    createdAt   DateTime   @default(now())
    views       Int
    author      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments    Comment[]
    userId      String
    album       Album?     @relation(fields: [albumId], references: [id])
    albumId     String?
    likes       PostLike[]
    topPost     TopPost[]
    report      Report?    @relation(fields: [reportId], references: [id])
    reportId    String?
}

enum CameraType {
    digital
    film
    phone
}

model Camera {
    id     String     @id @default(cuid())
    make   String
    model  String
    type   CameraType
    user   User       @relation(fields: [userId], references: [id])
    userId String
}

model Lens {
    id     String @id @default(cuid())
    make   String
    model  String
    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Comment {
    id        String   @id @default(cuid())
    author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comment   String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    createdAt DateTime @default(now())
}
